import os
import re
import customtkinter as ctk
from tkinter import messagebox, END
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import win32print
import win32ui


# Initialize theme
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

# Path for resume
documents_path = os.path.join(os.path.expanduser("~"), "Documents")
generated_filepath = ""

# Function to toggle password visibility
def toggle_password_visibility():
    if show_password_checkbox.get():
        password_entry.configure(show="")
    else:
        password_entry.configure(show="*")

# Login Page Code First
def login():
    username = username_entry.get()
    password = password_entry.get()
    try:
        with open("users.txt", "r") as f:
            users = f.read().splitlines()
            if f"{username}:{password}" in users:
                show_resume_builder()
            else:
                messagebox.showerror("Login Failed", "Wrong username or password")
    except FileNotFoundError:
        messagebox.showerror("Error", "No users registered yet")

def create_account():
    username = username_entry.get()
    password = password_entry.get()
    if not username or not password:
        messagebox.showerror("Error", "Please fill in both fields")
        return
    if os.path.exists("users.txt"):
        with open("users.txt", "r") as f:
            existing_users = [line.split(":")[0] for line in f]
        if username in existing_users:
            messagebox.showerror("Error", "Username already exists")
            return
    with open("users.txt", "a") as f:
        f.write(f"{username}:{password}\n")
    messagebox.showinfo("Success", "Account created. You can now log in.")

def show_resume_builder():
    login_root.destroy()
    main_app()

# Helper functions
def center_window(window, width, height):
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    x = int((screen_width / 2) - (width / 2))
    y = int((screen_height / 2) - (height / 2))
    window.geometry(f"{width}x{height}+{x}+{y}")

def get_next_filename(extension, username):
    base = re.sub(r'\W+', '', username.replace(" ", "")) or "resume"
    n = 0
    while True:
        filename = f"{base}{n if n > 0 else ''}.{extension.lower()}"
        full_path = os.path.join(documents_path, filename)
        if not os.path.exists(full_path):
            return full_path
        n += 1

# Main Resume Builder App Code
def save_resume():
    name = name_entry.get()
    email = email_entry.get()
    phone = phone_entry.get()
    working_experience = working_experience_entry.get()
    summary = summary_text.get("1.0", END).strip()
    file_extension = file_type.get().lower()

    if not name or not email or not phone:
        messagebox.showerror("Error", "Please fill in all required fields")
        return

    global generated_filepath
    generated_filepath = get_next_filename(file_extension, name)

    if file_extension == "pdf":
        save_as_pdf(name, email, phone, working_experience, summary)
    else:
        save_as_txt(name, email, phone, working_experience, summary)

    status_label.configure(text=f"Resume saved as {generated_filepath}")

def save_as_pdf(name, email, phone, working_experience, summary):
    c = canvas.Canvas(generated_filepath, pagesize=letter)
    c.setFont("Helvetica", 12)
    c.drawString(100, 750, f"Name: {name}")
    c.drawString(100, 730, f"Email: {email}")
    c.drawString(100, 710, f"Phone: {phone}")
    c.drawString(100, 690, f"Working Experience: {working_experience}")
    c.drawString(100, 670, f"Summary: {summary}")
    c.save()

def save_as_txt(name, email, phone, working_experience, summary):
    with open(generated_filepath, "w") as f:
        f.write(f"Name: {name}\n")
        f.write(f"Email: {email}\n")
        f.write(f"Phone: {phone}\n")
        f.write(f"Working Experience: {working_experience}\n")
        f.write(f"Summary: {summary}\n")

def print_resume():
    if not generated_filepath:
        messagebox.showerror("Error", "No resume generated yet!")
        return

    printer_name = win32print.GetDefaultPrinter()
    print_job = win32print.OpenPrinter(printer_name)
    printer_info = win32print.GetPrinter(print_job, 2)

    hprinter = win32ui.CreateDC()
    hprinter.CreatePrinterDC(printer_name)
    hprinter.StartDoc(generated_filepath)
    hprinter.StartPage()

    hprinter.DrawText("Printing Resume...", (100, 100))
    hprinter.EndPage()
    hprinter.EndDoc()
    hprinter.DeleteDC()

# Main UI
def main_app():
    global name_entry, email_entry, phone_entry, working_experience_entry, summary_text, file_type, status_label

    root = ctk.CTk()
    root.title("Resume Builder")
    center_window(root, 700, 800)

    ctk.CTkLabel(root, text="üìù Resume Builder", font=("Segoe UI", 26, "bold")).pack(pady=20)

    form_frame = ctk.CTkFrame(root)
    form_frame.pack(pady=10, padx=20, fill="both", expand=True)

    def create_labeled_entry(label_text):
        label = ctk.CTkLabel(form_frame, text=label_text, font=("Segoe UI", 12))
        label.pack(pady=(10, 0))
        entry = ctk.CTkEntry(form_frame, width=300)
        entry.pack(pady=5)
        return entry

    name_entry = create_labeled_entry("Full Name")
    email_entry = create_labeled_entry("Email")
    phone_entry = create_labeled_entry("Phone")
    working_experience_entry = create_labeled_entry("Working Experience")  # New field

    ctk.CTkLabel(form_frame, text="Summary", font=("Segoe UI", 12)).pack(pady=(10, 0))
    summary_text = ctk.CTkTextbox(form_frame, width=400, height=120)
    summary_text.pack(pady=5)

    ctk.CTkLabel(form_frame, text="Export As", font=("Segoe UI", 12)).pack(pady=(15, 5))
    file_type = ctk.StringVar(value="PDF")
    file_dropdown = ctk.CTkOptionMenu(form_frame, values=["PDF", "TXT"], variable=file_type)
    file_dropdown.pack()

    ctk.CTkButton(form_frame, text="Generate Resume", command=save_resume, fg_color="#27AE60").pack(pady=10)
    ctk.CTkButton(form_frame, text="Print Resume", command=print_resume, fg_color="#2980B9").pack(pady=5)

    status_label = ctk.CTkLabel(root, text="", font=("Segoe UI", 10))
    status_label.pack(pady=10)

    root.mainloop()

# Login Page UI
login_root = ctk.CTk()
login_root.title("Login - Resume Builder")
center_window(login_root, 400, 300)

frame = ctk.CTkFrame(login_root)
frame.pack(pady=20, padx=30, fill="both", expand=True)

ctk.CTkLabel(frame, text="Login or Create Account", font=("Segoe UI", 16, "bold")).pack(pady=15)
username_entry = ctk.CTkEntry(frame, placeholder_text="Username")
username_entry.pack(pady=5)
password_entry = ctk.CTkEntry(frame, placeholder_text="Password", show="*")
password_entry.pack(pady=5)

# Show Password Checkbox with design adjustments
show_password_checkbox = ctk.CTkCheckBox(frame, text="Show Password", command=toggle_password_visibility)
show_password_checkbox.pack(pady=(5, 15))  # Adjusted padding for better spacing

ctk.CTkButton(frame, text="Login", command=login).pack(pady=5)
ctk.CTkButton(frame, text="Create Account", command=create_account).pack(pady=5)

login_root.mainloop()
